# Choose between www and non-www, listen on the *wrong* one and redirect to
# the right one -- http://wiki.nginx.org/Pitfalls#Server_Name
server {
  listen [::]:80;
  listen 80;

  # listen on the www and bare host on port 80
  server_name www.lists.chicagolug.org lists.chicagolug.org;
  # and redirect to the secure, non-www host (declared below)
  return 301 https://lists.chicagolug.org$request_uri;
}

server {
  listen [::]:443 ssl http2;
  listen 443 ssl http2;

  # listen on the www host on port 443
  server_name www.lists.chicagolug.org;
  # and redirect to the secure non-www host (declared below)
  return 301 https://lists.chicagolug.org$request_uri;

  ssl_certificate /etc/letsencrypt/live/www.lists.chicagolug.org/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/www.lists.chicagolug.org/privkey.pem;
  # ssl_dhparam /etc/ssl/certs/dhparam.pem;

  ssl_protocols TLSv1.2;
  ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
  ssl_prefer_server_ciphers  on;
  ssl_session_cache    shared:SSL:10m; # a 1mb cache can hold about 4000 sessions, so we can hold 40000 sessions
  ssl_session_timeout  24h;
  keepalive_timeout 150s; # up from 75 secs default
  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

  # This tells Nginx to cache open file handles, "not found" errors, metadata
  # about files and their permissions, etc. Production servers with stable file
  # collections will definitely want to enable the cache.
  open_file_cache          max=1000 inactive=20s;
  open_file_cache_valid    30s;
  open_file_cache_min_uses 2;
  open_file_cache_errors   on;

  # The X-Frame-Options header indicates whether a browser should be allowed
  # to render a page within a frame or iframe.
  add_header X-Frame-Options SAMEORIGIN always;

  # MIME type sniffing security protection
  #	There are very few edge cases where you wouldn't want this enabled.
  add_header X-Content-Type-Options nosniff always;

  # The header instructs IE to enable its inbuilt anti-cross-site scripting filter.
  add_header X-XSS-Protection "1; mode=block" always;

  # with Content Security Policy (CSP) enabled (and a browser that supports it
  # (http://caniuse.com/#feat=contentsecuritypolicy), you can tell the browser
  # that it can only download content from the domains you explicitly allow
  # There is website that helps you generate a policy:  http://cspisawesome.com/
  add_header Content-Security-Policy "default-src 'self'; style-src 'self' 'unsafe-inline'; script-src 'self';" always;

  # Prevent mobile network providers from modifying your site
  # https://developers.google.com/speed/pagespeed/module/configuration#notransform
  add_header "Cache-Control" "no-transform";

  # Don't send referrer info for clicked links
  # https://scotthelme.co.uk/a-new-security-header-referrer-policy/
  add_header Referrer-Policy "no-referrer";

  # OCSP stapling...
  ssl_stapling on;
  ssl_stapling_verify on;
  resolver 8.8.8.8 8.8.4.4 216.146.35.35 216.146.36.36 valid=60s;
  resolver_timeout 2s;

  # WebFonts
  # If you are NOT using cross-domain-fonts.conf, uncomment the following directive
  location ~* \.(?:ttf|ttc|otf|eot|woff|woff2)$ {
    add_header Cache-Control "max-age=2592000";
    access_log off;
  }

  # Prevent clients from accessing hidden files (starting with a
  # dot - .well-known is allowed)
  location ~* /\.(?!well-known\/) {
    deny all;
  }

  # Prevent clients from accessing to backup/config/source files
  location ~* (?:\.(?:bak|conf|dist|fla|in[ci]|log|psd|sh|sql|sw[op])|~)$ {
    deny all;
  }

}

server {
  listen [::]:443 ssl http2;
  listen 443 ssl http2;

  # The hostname to respond to:
  server_name lists.chicagolug.org;
  # Path for static files
  root /usr/lib;
  #Specify a charset
  charset utf-8;
  # Custom 404 page
  error_page 404 /404.html;

  ssl_certificate /etc/letsencrypt/live/lists.chicagolug.org/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/lists.chicagolug.org/privkey.pem;
  # ssl_dhparam /etc/ssl/certs/dhparam.pem;
  ssl_protocols TLSv1.2;
  ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';  
  ssl_prefer_server_ciphers  on;
  ssl_session_cache    shared:SSL:10m; # a 1mb cache can hold about 4000 sessions, so we can hold 40000 sessions
  ssl_session_timeout  24h;
  keepalive_timeout 150s; # up from 75 secs default
  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

  # This tells Nginx to cache open file handles, "not found" errors, metadata
  # about files and their permissions, etc. Production servers with stable file
  # collections will definitely want to enable the cache.
  open_file_cache          max=1000 inactive=20s;
  open_file_cache_valid    30s;
  open_file_cache_min_uses 2;
  open_file_cache_errors   on;

  # The X-Frame-Options header indicates whether a browser should be allowed
  # to render a page within a frame or iframe.
  add_header X-Frame-Options SAMEORIGIN always;

  # MIME type sniffing security protection
  #	There are very few edge cases where you wouldn't want this enabled.
  add_header X-Content-Type-Options nosniff always;

  # The header instructs IE to enable its inbuilt anti-cross-site scripting filter.
  add_header X-XSS-Protection "1; mode=block" always;

  # with Content Security Policy (CSP) enabled (and a browser that supports it
  # (http://caniuse.com/#feat=contentsecuritypolicy), you can tell the browser
  # that it can only download content from the domains you explicitly allow
  # There is website that helps you generate a policy:  http://cspisawesome.com/
  add_header Content-Security-Policy "default-src 'self'; style-src 'self' 'unsafe-inline'; script-src 'self';" always;

  # Prevent mobile network providers from modifying your site
  # https://developers.google.com/speed/pagespeed/module/configuration#notransform
  add_header "Cache-Control" "no-transform";

  # Don't send referrer info for clicked links
  # https://scotthelme.co.uk/a-new-security-header-referrer-policy/
  add_header Referrer-Policy "no-referrer";

  # OCSP stapling...
  ssl_stapling on;
  ssl_stapling_verify on;
  resolver 8.8.8.8 8.8.4.4 216.146.35.35 216.146.36.36 valid=60s;
  resolver_timeout 2s;

  # WebFonts
  # If you are NOT using cross-domain-fonts.conf, uncomment the following directive
  location ~* \.(?:ttf|ttc|otf|eot|woff|woff2)$ {
    add_header Cache-Control "max-age=2592000";
    access_log off;
  }

  # Prevent clients from accessing hidden files (starting with a
  # dot - .well-known is allowed)
  location ~* /\.(?!well-known\/) {
    deny all;
  }

  # Prevent clients from accessing to backup/config/source files
  location ~* (?:\.(?:bak|conf|dist|fla|in[ci]|log|psd|sh|sql|sw[op])|~)$ {
    deny all;
  }

  location = / {
    rewrite ^ /mailman/listinfo permanent;
  }

  location / {
    rewrite ^ /mailman$uri?$args;
  }

  location = /mailman/ {
    rewrite ^ /mailman/listinfo permanent;
  }

  location /mailman/ {
    gzip     off;
    fastcgi_param HTTPS on;
    fastcgi_param   HTTPS         on;
    fastcgi_param   HTTP_SCHEME   https;
    fastcgi_split_path_info (^/mailman/[^/]*)(.*)$;
    fastcgi_param SCRIPT_FILENAME $document_root/cgi-bin$fastcgi_script_name;
    fastcgi_param PATH_INFO $fastcgi_path_info;
    include /etc/nginx/fastcgi_params;
    fastcgi_pass  unix:/var/run/fcgiwrap.socket;
  }

  location /cgi-bin/ {
    #rewrite ^/cgi-bin(.*)$ $1 permanent;
    gzip     off;
    fastcgi_split_path_info (/mailman/[^/]*)(.*)$;
    fastcgi_param HTTPS      on;
    fastcgi_param   HTTP_SCHEME   https;
    fastcgi_param SCRIPT_FILENAME $document_root/cgi-bin$fastcgi_script_name;
    fastcgi_param PATH_INFO $fastcgi_path_info;
    include /etc/nginx/fastcgi_params;
    fastcgi_pass  unix:/var/run/fcgiwrap.socket;
  }


  location /images/mailman {
    alias /var/lib/mailman/icons;
  }

  location /pipermail {
    alias /var/lib/mailman/archives/public;
    autoindex on;
  }
}
